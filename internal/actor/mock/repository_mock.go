// Code generated by MockGen. DO NOT EDIT.
// Source: internal/actor/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "vk-intern_test-case/models"

	gomock "github.com/golang/mock/gomock"
)

// MockActorRepository is a mock of ActorRepository interface.
type MockActorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActorRepositoryMockRecorder
}

// MockActorRepositoryMockRecorder is the mock recorder for MockActorRepository.
type MockActorRepositoryMockRecorder struct {
	mock *MockActorRepository
}

// NewMockActorRepository creates a new mock instance.
func NewMockActorRepository(ctrl *gomock.Controller) *MockActorRepository {
	mock := &MockActorRepository{ctrl: ctrl}
	mock.recorder = &MockActorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorRepository) EXPECT() *MockActorRepositoryMockRecorder {
	return m.recorder
}

// AddActor mocks base method.
func (m *MockActorRepository) AddActor(arg0 *models.Actor) (*models.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActor", arg0)
	ret0, _ := ret[0].(*models.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddActor indicates an expected call of AddActor.
func (mr *MockActorRepositoryMockRecorder) AddActor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockActorRepository)(nil).AddActor), arg0)
}

// DeleteActor mocks base method.
func (m *MockActorRepository) DeleteActor(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorRepositoryMockRecorder) DeleteActor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorRepository)(nil).DeleteActor), arg0)
}

// GetActors mocks base method.
func (m *MockActorRepository) GetActors() ([]models.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].([]models.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorRepositoryMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorRepository)(nil).GetActors))
}

// UpdateActor mocks base method.
func (m *MockActorRepository) UpdateActor(arg0 int, arg1 *models.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorRepositoryMockRecorder) UpdateActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorRepository)(nil).UpdateActor), arg0, arg1)
}
