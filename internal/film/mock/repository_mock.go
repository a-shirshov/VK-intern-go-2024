// Code generated by MockGen. DO NOT EDIT.
// Source: internal/film/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "vk-intern_test-case/models"

	gomock "github.com/golang/mock/gomock"
)

// MockFilmRepository is a mock of FilmRepository interface.
type MockFilmRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilmRepositoryMockRecorder
}

// MockFilmRepositoryMockRecorder is the mock recorder for MockFilmRepository.
type MockFilmRepositoryMockRecorder struct {
	mock *MockFilmRepository
}

// NewMockFilmRepository creates a new mock instance.
func NewMockFilmRepository(ctrl *gomock.Controller) *MockFilmRepository {
	mock := &MockFilmRepository{ctrl: ctrl}
	mock.recorder = &MockFilmRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmRepository) EXPECT() *MockFilmRepositoryMockRecorder {
	return m.recorder
}

// AddFilm mocks base method.
func (m *MockFilmRepository) AddFilm(arg0 *models.FilmWithActors) (*models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilm", arg0)
	ret0, _ := ret[0].(*models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockFilmRepositoryMockRecorder) AddFilm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockFilmRepository)(nil).AddFilm), arg0)
}

// DeleteFilm mocks base method.
func (m *MockFilmRepository) DeleteFilm(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmRepositoryMockRecorder) DeleteFilm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilmRepository)(nil).DeleteFilm), arg0)
}

// GetFilmsByActor mocks base method.
func (m *MockFilmRepository) GetFilmsByActor(actorName string) ([]models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByActor", actorName)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsByActor indicates an expected call of GetFilmsByActor.
func (mr *MockFilmRepositoryMockRecorder) GetFilmsByActor(actorName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByActor", reflect.TypeOf((*MockFilmRepository)(nil).GetFilmsByActor), actorName)
}

// GetFilmsByTitle mocks base method.
func (m *MockFilmRepository) GetFilmsByTitle(title string) ([]models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsByTitle", title)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsByTitle indicates an expected call of GetFilmsByTitle.
func (mr *MockFilmRepositoryMockRecorder) GetFilmsByTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsByTitle", reflect.TypeOf((*MockFilmRepository)(nil).GetFilmsByTitle), title)
}

// GetFilmsSorted mocks base method.
func (m *MockFilmRepository) GetFilmsSorted(field string) ([]models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsSorted", field)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmsSorted indicates an expected call of GetFilmsSorted.
func (mr *MockFilmRepositoryMockRecorder) GetFilmsSorted(field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsSorted", reflect.TypeOf((*MockFilmRepository)(nil).GetFilmsSorted), field)
}

// UpdateFilm mocks base method.
func (m *MockFilmRepository) UpdateFilm(arg0 int, arg1 *models.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockFilmRepositoryMockRecorder) UpdateFilm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockFilmRepository)(nil).UpdateFilm), arg0, arg1)
}
